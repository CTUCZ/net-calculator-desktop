# -*- coding: utf-8 -*-

"""
PyQT library/framework - free-to-use, licensed under GNU General Public License (GPL) v3
 - can be used in commercial apps, users can be charged for copies of the app
 - source code sharing is needed (using GPL libs means derived work) !!!
 - PySide = alternative, where code sharing is not required

convert script to executable 
- https://www.geeksforgeeks.org/convert-python-script-to-exe-file/
- https://datatofish.com/executable-pyinstaller/
- https://medium.com/analytics-vidhya/how-to-build-your-first-desktop-application-in-python-7568c7d74311

"""

from PyQt6.QtWidgets import QApplication, QMainWindow
from app_gui import Ui_AppMainWindow # UI created in QtDesigner

import app_calc as ac
#import locale
#locale.setlocale(locale.LC_ALL, "") # not working



# Subclass QMainWindow to customize the application's main window
class CalculatorMainWindow(QMainWindow):
    def __init__(self):
        # subclassing a Qt class - super __init__ function must be called to allow Qt to set up the object
        super().__init__()
        
        # use the class for UI (prepared in QtDesigner and generated by pyuic from .ui file)
        self.ui = Ui_AppMainWindow()
        self.ui.setupUi(self)

        #self.setWindowTitle("CTO Net Capacity Impact Calculator") # rewrite window title
        
        # handling of Utilization Factor
        self.ui.out_uf.append( ac.prepare_UF(nbr_max=self.ui.nbr_max.value(), nbr_avg=self.ui.nbr_avg.value()) ) # initial value setting
        self.ui.nbr_max.valueChanged.connect(self.update_UF) # immediate value updating
        self.ui.nbr_avg.valueChanged.connect(self.update_UF) # immediate value updating
    
        # handling of SDR values
        self.ui.out_sdr_noUF.append("bezuf")
        
        
    
    def update_UF(self):
        """ Get last input values from GUI, re/calculates result and updates it in the GUI. """
        nbr_max = self.ui.nbr_max.value()
        nbr_avg = self.ui.nbr_avg.value()
        # TODO: check if nbr_avg < nbr_max 
        output_UF = ac.prepare_UF(nbr_max, nbr_avg)
        
        self.ui.out_uf.clear() 
        self.ui.out_uf.append(output_UF) 
        

if __name__ == '__main__':
    # One (and only one) QApplication instance per application.
    app = QApplication([])
    
    # Qt widget which is the application window
    window = CalculatorMainWindow()
    window.show()  # widgets without a parent are invisible by default
    
    # Start the event loop.
    app.exec()
